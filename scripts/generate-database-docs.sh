#!/bin/bash

# Generate Database Documentation Script
# This script connects to Supabase and generates schema documentation

echo "🔄 Refreshing database schema documentation..."

# Check if Supabase CLI is installed
if ! command -v supabase &> /dev/null; then
    echo "❌ Supabase CLI not found. Please install it first:"
    echo "   npm install -g supabase"
    exit 1
fi

# Check if we're in a Supabase project
if [ ! -f "supabase/config.toml" ]; then
    echo "❌ No Supabase project found. Please run 'supabase init' first."
    exit 1
fi

# Generate schema documentation
echo "📊 Generating database schema..."

# Create DATABASE.md with current schema
cat > DATABASE.md << 'EOF'
# Database Schema Documentation

> **Auto-generated on:** $(date)
> **Generated by:** scripts/generate-database-docs.sh

## Overview
This document contains the current database schema for the Supabase PostgreSQL database.

## How to Refresh This Documentation
Run the following command to update this documentation:
```bash
./scripts/generate-database-docs.sh
```

## Tables

EOF

# Add actual schema information (you'll need to customize this based on your setup)
echo "### Schema Information" >> DATABASE.md
echo "" >> DATABASE.md
echo "⚠️ **Setup Required**: Add actual schema generation commands here." >> DATABASE.md
echo "" >> DATABASE.md
echo "**Common commands to add:**" >> DATABASE.md
echo "- \`supabase db dump --schema-only\`" >> DATABASE.md
echo "- \`pg_dump --schema-only [connection-string]\`" >> DATABASE.md
echo "- Custom SQL queries to describe tables" >> DATABASE.md
echo "" >> DATABASE.md

# TODO: Add actual schema generation logic here
# Example: supabase db dump --schema-only >> DATABASE.md
# Or: Use pg_dump or SQL queries to get table structures

echo "✅ Database documentation generated at DATABASE.md"
echo "📝 Next steps:"
echo "   1. Customize this script with your actual schema generation logic"
echo "   2. Add your Supabase connection details"
echo "   3. Run the script to generate real schema documentation"