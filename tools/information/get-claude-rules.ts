import { z } from "zod";
import { ToolDefinition } from "../types";

export const getClaudeRules: ToolDefinition = {
  name: "get-claude-rules",
  description: "Generate strict CLAUDE.md rules for efficient web app development",
  inputSchema: z.object({}).optional(),
  handler: async (params) => {
    try {
      const rulesTemplate = generateWebAppClaudeRules();
      
      return {
        content: [{
          type: "text" as const,
          text: rulesTemplate
        }]
      };
    } catch (error) {
      return {
        content: [{
          type: "text" as const,
          text: `Error generating Claude rules: ${error instanceof Error ? error.message : String(error)}`
        }]
      };
    }
  }
};

function generateWebAppClaudeRules(): string {
  return `# CLAUDE.md

Generated by lolek-mcp context-engineering system for web app development.

## STRICT OPERATIONAL RULES

### 1. Structural Decision Framework
- ALWAYS consult DATABASE.md before making any structural decisions
- NEVER create database tables, models, or schemas without referencing current structure
- ALWAYS align component architecture with database relationships
- NEVER implement features that conflict with established data patterns

### 2. File Management Protocol
- ALWAYS edit existing files instead of creating new ones
- NEVER create documentation files unless explicitly requested
- ALWAYS check if similar functionality exists before implementing
- NEVER duplicate code across files
- ALWAYS verify file changes align with DATABASE.md structure

### 3. Component Development
- ALWAYS examine existing components before creating new ones
- ALWAYS follow established naming conventions that match database entities
- NEVER create components without proper TypeScript types derived from database schema
- ALWAYS use existing utility functions and hooks
- NEVER build UI components that don't align with data model

### 4. State Management
- ALWAYS use existing state management patterns that mirror database structure
- NEVER create new state stores without checking existing ones and DATABASE.md
- ALWAYS handle loading and error states for all database operations
- NEVER mutate state directly - follow database transaction patterns
- ALWAYS ensure state shape matches database schema

### 5. API Integration
- ALWAYS handle API errors gracefully with database-aware error messages
- NEVER expose sensitive data in API responses (check DATABASE.md for sensitive fields)
- ALWAYS validate API inputs and outputs against database constraints
- NEVER make API calls without proper error handling
- ALWAYS respect database relationships in API design

### 6. Testing Requirements
- ALWAYS run existing tests before marking complete
- NEVER skip testing for modified functionality
- ALWAYS test error scenarios including database failures
- NEVER assume tests pass without running them
- ALWAYS test database interactions and constraints

### 7. Performance Rules
- ALWAYS consider bundle size impact and database query efficiency
- NEVER load unnecessary dependencies or make inefficient database calls
- ALWAYS optimize images and assets
- NEVER ignore performance warnings or slow database queries
- ALWAYS follow DATABASE.md recommendations for indexing and optimization

### 8. Security Guidelines
- NEVER commit secrets or API keys
- ALWAYS validate user inputs against database constraints
- NEVER trust client-side data
- ALWAYS sanitize user-generated content before database storage
- NEVER expose database structure details in client-side code

## FORBIDDEN ACTIONS
- Creating new files without explicit necessity
- Modifying core configuration without understanding impact
- Adding dependencies without justification
- Implementing features outside current scope
- Bypassing existing error handling patterns
- Making database changes without consulting DATABASE.md
- Creating components that don't align with data model

## REQUIRED ACTIONS BEFORE ANY DEVELOPMENT
1. Read and understand DATABASE.md completely
2. Verify all structural decisions align with database schema
3. Check existing code patterns and database interactions
4. Validate all assumptions against actual database structure
5. Test every change including database operations
6. Ensure UI components reflect database relationships
7. Follow established data access patterns

## WEB APP DEVELOPMENT FOCUS
This is a web application with a structured database. Prioritize:
- Data consistency and integrity (follow DATABASE.md)
- User experience that reflects database relationships
- Responsive design and accessibility
- Performance with efficient database queries
- Security and data protection (respect DATABASE.md constraints)
- Clean, maintainable code structure that mirrors database design

## CRITICAL REQUIREMENT
Before implementing ANY feature, component, or change:
**MUST read DATABASE.md to understand how the change fits into the overall data architecture**

---
*Generated by lolek-mcp context-engineering system*`;
}